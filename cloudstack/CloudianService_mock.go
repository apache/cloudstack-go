//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloudstack/CloudianService.go
//
// Generated by this command:
//
//	mockgen -destination=./cloudstack/CloudianService_mock.go -package=cloudstack -copyright_file=header.txt -source=./cloudstack/CloudianService.go
//

// Package cloudstack is a generated GoMock package.
package cloudstack

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCloudianServiceIface is a mock of CloudianServiceIface interface.
type MockCloudianServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockCloudianServiceIfaceMockRecorder
	isgomock struct{}
}

// MockCloudianServiceIfaceMockRecorder is the mock recorder for MockCloudianServiceIface.
type MockCloudianServiceIfaceMockRecorder struct {
	mock *MockCloudianServiceIface
}

// NewMockCloudianServiceIface creates a new mock instance.
func NewMockCloudianServiceIface(ctrl *gomock.Controller) *MockCloudianServiceIface {
	mock := &MockCloudianServiceIface{ctrl: ctrl}
	mock.recorder = &MockCloudianServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudianServiceIface) EXPECT() *MockCloudianServiceIfaceMockRecorder {
	return m.recorder
}

// CloudianIsEnabled mocks base method.
func (m *MockCloudianServiceIface) CloudianIsEnabled(p *CloudianIsEnabledParams) (*CloudianIsEnabledResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudianIsEnabled", p)
	ret0, _ := ret[0].(*CloudianIsEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudianIsEnabled indicates an expected call of CloudianIsEnabled.
func (mr *MockCloudianServiceIfaceMockRecorder) CloudianIsEnabled(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudianIsEnabled", reflect.TypeOf((*MockCloudianServiceIface)(nil).CloudianIsEnabled), p)
}

// NewCloudianIsEnabledParams mocks base method.
func (m *MockCloudianServiceIface) NewCloudianIsEnabledParams() *CloudianIsEnabledParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCloudianIsEnabledParams")
	ret0, _ := ret[0].(*CloudianIsEnabledParams)
	return ret0
}

// NewCloudianIsEnabledParams indicates an expected call of NewCloudianIsEnabledParams.
func (mr *MockCloudianServiceIfaceMockRecorder) NewCloudianIsEnabledParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCloudianIsEnabledParams", reflect.TypeOf((*MockCloudianServiceIface)(nil).NewCloudianIsEnabledParams))
}
