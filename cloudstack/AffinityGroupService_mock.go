//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloudstack/AffinityGroupService.go

// Package cloudstack is a generated GoMock package.
package cloudstack

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAffinityGroupServiceIface is a mock of AffinityGroupServiceIface interface.
type MockAffinityGroupServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockAffinityGroupServiceIfaceMockRecorder
}

// MockAffinityGroupServiceIfaceMockRecorder is the mock recorder for MockAffinityGroupServiceIface.
type MockAffinityGroupServiceIfaceMockRecorder struct {
	mock *MockAffinityGroupServiceIface
}

// NewMockAffinityGroupServiceIface creates a new mock instance.
func NewMockAffinityGroupServiceIface(ctrl *gomock.Controller) *MockAffinityGroupServiceIface {
	mock := &MockAffinityGroupServiceIface{ctrl: ctrl}
	mock.recorder = &MockAffinityGroupServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAffinityGroupServiceIface) EXPECT() *MockAffinityGroupServiceIfaceMockRecorder {
	return m.recorder
}

// CreateAffinityGroup mocks base method.
func (m *MockAffinityGroupServiceIface) CreateAffinityGroup(p *CreateAffinityGroupParams) (*CreateAffinityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAffinityGroup", p)
	ret0, _ := ret[0].(*CreateAffinityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAffinityGroup indicates an expected call of CreateAffinityGroup.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) CreateAffinityGroup(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAffinityGroup", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).CreateAffinityGroup), p)
}

// DeleteAffinityGroup mocks base method.
func (m *MockAffinityGroupServiceIface) DeleteAffinityGroup(p *DeleteAffinityGroupParams) (*DeleteAffinityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAffinityGroup", p)
	ret0, _ := ret[0].(*DeleteAffinityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAffinityGroup indicates an expected call of DeleteAffinityGroup.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) DeleteAffinityGroup(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAffinityGroup", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).DeleteAffinityGroup), p)
}

// GetAffinityGroupByID mocks base method.
func (m *MockAffinityGroupServiceIface) GetAffinityGroupByID(id string, opts ...OptionFunc) (*AffinityGroup, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAffinityGroupByID", varargs...)
	ret0, _ := ret[0].(*AffinityGroup)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAffinityGroupByID indicates an expected call of GetAffinityGroupByID.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) GetAffinityGroupByID(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinityGroupByID", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).GetAffinityGroupByID), varargs...)
}

// GetAffinityGroupByName mocks base method.
func (m *MockAffinityGroupServiceIface) GetAffinityGroupByName(name string, opts ...OptionFunc) (*AffinityGroup, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAffinityGroupByName", varargs...)
	ret0, _ := ret[0].(*AffinityGroup)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAffinityGroupByName indicates an expected call of GetAffinityGroupByName.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) GetAffinityGroupByName(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinityGroupByName", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).GetAffinityGroupByName), varargs...)
}

// GetAffinityGroupID mocks base method.
func (m *MockAffinityGroupServiceIface) GetAffinityGroupID(name string, opts ...OptionFunc) (string, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAffinityGroupID", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAffinityGroupID indicates an expected call of GetAffinityGroupID.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) GetAffinityGroupID(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinityGroupID", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).GetAffinityGroupID), varargs...)
}

// ListAffinityGroupTypes mocks base method.
func (m *MockAffinityGroupServiceIface) ListAffinityGroupTypes(p *ListAffinityGroupTypesParams) (*ListAffinityGroupTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAffinityGroupTypes", p)
	ret0, _ := ret[0].(*ListAffinityGroupTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAffinityGroupTypes indicates an expected call of ListAffinityGroupTypes.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) ListAffinityGroupTypes(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAffinityGroupTypes", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).ListAffinityGroupTypes), p)
}

// ListAffinityGroups mocks base method.
func (m *MockAffinityGroupServiceIface) ListAffinityGroups(p *ListAffinityGroupsParams) (*ListAffinityGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAffinityGroups", p)
	ret0, _ := ret[0].(*ListAffinityGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAffinityGroups indicates an expected call of ListAffinityGroups.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) ListAffinityGroups(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAffinityGroups", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).ListAffinityGroups), p)
}

// NewCreateAffinityGroupParams mocks base method.
func (m *MockAffinityGroupServiceIface) NewCreateAffinityGroupParams(name, affinityGroupType string) *CreateAffinityGroupParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreateAffinityGroupParams", name, affinityGroupType)
	ret0, _ := ret[0].(*CreateAffinityGroupParams)
	return ret0
}

// NewCreateAffinityGroupParams indicates an expected call of NewCreateAffinityGroupParams.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) NewCreateAffinityGroupParams(name, affinityGroupType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreateAffinityGroupParams", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).NewCreateAffinityGroupParams), name, affinityGroupType)
}

// NewDeleteAffinityGroupParams mocks base method.
func (m *MockAffinityGroupServiceIface) NewDeleteAffinityGroupParams() *DeleteAffinityGroupParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDeleteAffinityGroupParams")
	ret0, _ := ret[0].(*DeleteAffinityGroupParams)
	return ret0
}

// NewDeleteAffinityGroupParams indicates an expected call of NewDeleteAffinityGroupParams.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) NewDeleteAffinityGroupParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeleteAffinityGroupParams", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).NewDeleteAffinityGroupParams))
}

// NewListAffinityGroupTypesParams mocks base method.
func (m *MockAffinityGroupServiceIface) NewListAffinityGroupTypesParams() *ListAffinityGroupTypesParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListAffinityGroupTypesParams")
	ret0, _ := ret[0].(*ListAffinityGroupTypesParams)
	return ret0
}

// NewListAffinityGroupTypesParams indicates an expected call of NewListAffinityGroupTypesParams.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) NewListAffinityGroupTypesParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListAffinityGroupTypesParams", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).NewListAffinityGroupTypesParams))
}

// NewListAffinityGroupsParams mocks base method.
func (m *MockAffinityGroupServiceIface) NewListAffinityGroupsParams() *ListAffinityGroupsParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListAffinityGroupsParams")
	ret0, _ := ret[0].(*ListAffinityGroupsParams)
	return ret0
}

// NewListAffinityGroupsParams indicates an expected call of NewListAffinityGroupsParams.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) NewListAffinityGroupsParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListAffinityGroupsParams", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).NewListAffinityGroupsParams))
}

// NewUpdateVMAffinityGroupParams mocks base method.
func (m *MockAffinityGroupServiceIface) NewUpdateVMAffinityGroupParams(id string) *UpdateVMAffinityGroupParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdateVMAffinityGroupParams", id)
	ret0, _ := ret[0].(*UpdateVMAffinityGroupParams)
	return ret0
}

// NewUpdateVMAffinityGroupParams indicates an expected call of NewUpdateVMAffinityGroupParams.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) NewUpdateVMAffinityGroupParams(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdateVMAffinityGroupParams", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).NewUpdateVMAffinityGroupParams), id)
}

// UpdateVMAffinityGroup mocks base method.
func (m *MockAffinityGroupServiceIface) UpdateVMAffinityGroup(p *UpdateVMAffinityGroupParams) (*UpdateVMAffinityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVMAffinityGroup", p)
	ret0, _ := ret[0].(*UpdateVMAffinityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVMAffinityGroup indicates an expected call of UpdateVMAffinityGroup.
func (mr *MockAffinityGroupServiceIfaceMockRecorder) UpdateVMAffinityGroup(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVMAffinityGroup", reflect.TypeOf((*MockAffinityGroupServiceIface)(nil).UpdateVMAffinityGroup), p)
}
