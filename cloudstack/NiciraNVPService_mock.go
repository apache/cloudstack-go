//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloudstack/NiciraNVPService.go

// Package cloudstack is a generated GoMock package.
package cloudstack

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNiciraNVPServiceIface is a mock of NiciraNVPServiceIface interface.
type MockNiciraNVPServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockNiciraNVPServiceIfaceMockRecorder
}

// MockNiciraNVPServiceIfaceMockRecorder is the mock recorder for MockNiciraNVPServiceIface.
type MockNiciraNVPServiceIfaceMockRecorder struct {
	mock *MockNiciraNVPServiceIface
}

// NewMockNiciraNVPServiceIface creates a new mock instance.
func NewMockNiciraNVPServiceIface(ctrl *gomock.Controller) *MockNiciraNVPServiceIface {
	mock := &MockNiciraNVPServiceIface{ctrl: ctrl}
	mock.recorder = &MockNiciraNVPServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNiciraNVPServiceIface) EXPECT() *MockNiciraNVPServiceIfaceMockRecorder {
	return m.recorder
}

// AddNiciraNvpDevice mocks base method.
func (m *MockNiciraNVPServiceIface) AddNiciraNvpDevice(p *AddNiciraNvpDeviceParams) (*AddNiciraNvpDeviceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNiciraNvpDevice", p)
	ret0, _ := ret[0].(*AddNiciraNvpDeviceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNiciraNvpDevice indicates an expected call of AddNiciraNvpDevice.
func (mr *MockNiciraNVPServiceIfaceMockRecorder) AddNiciraNvpDevice(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNiciraNvpDevice", reflect.TypeOf((*MockNiciraNVPServiceIface)(nil).AddNiciraNvpDevice), p)
}

// DeleteNiciraNvpDevice mocks base method.
func (m *MockNiciraNVPServiceIface) DeleteNiciraNvpDevice(p *DeleteNiciraNvpDeviceParams) (*DeleteNiciraNvpDeviceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNiciraNvpDevice", p)
	ret0, _ := ret[0].(*DeleteNiciraNvpDeviceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNiciraNvpDevice indicates an expected call of DeleteNiciraNvpDevice.
func (mr *MockNiciraNVPServiceIfaceMockRecorder) DeleteNiciraNvpDevice(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNiciraNvpDevice", reflect.TypeOf((*MockNiciraNVPServiceIface)(nil).DeleteNiciraNvpDevice), p)
}

// ListNiciraNvpDevices mocks base method.
func (m *MockNiciraNVPServiceIface) ListNiciraNvpDevices(p *ListNiciraNvpDevicesParams) (*ListNiciraNvpDevicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNiciraNvpDevices", p)
	ret0, _ := ret[0].(*ListNiciraNvpDevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNiciraNvpDevices indicates an expected call of ListNiciraNvpDevices.
func (mr *MockNiciraNVPServiceIfaceMockRecorder) ListNiciraNvpDevices(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNiciraNvpDevices", reflect.TypeOf((*MockNiciraNVPServiceIface)(nil).ListNiciraNvpDevices), p)
}

// NewAddNiciraNvpDeviceParams mocks base method.
func (m *MockNiciraNVPServiceIface) NewAddNiciraNvpDeviceParams(hostname, password, physicalnetworkid, transportzoneuuid, username string) *AddNiciraNvpDeviceParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAddNiciraNvpDeviceParams", hostname, password, physicalnetworkid, transportzoneuuid, username)
	ret0, _ := ret[0].(*AddNiciraNvpDeviceParams)
	return ret0
}

// NewAddNiciraNvpDeviceParams indicates an expected call of NewAddNiciraNvpDeviceParams.
func (mr *MockNiciraNVPServiceIfaceMockRecorder) NewAddNiciraNvpDeviceParams(hostname, password, physicalnetworkid, transportzoneuuid, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAddNiciraNvpDeviceParams", reflect.TypeOf((*MockNiciraNVPServiceIface)(nil).NewAddNiciraNvpDeviceParams), hostname, password, physicalnetworkid, transportzoneuuid, username)
}

// NewDeleteNiciraNvpDeviceParams mocks base method.
func (m *MockNiciraNVPServiceIface) NewDeleteNiciraNvpDeviceParams(nvpdeviceid string) *DeleteNiciraNvpDeviceParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDeleteNiciraNvpDeviceParams", nvpdeviceid)
	ret0, _ := ret[0].(*DeleteNiciraNvpDeviceParams)
	return ret0
}

// NewDeleteNiciraNvpDeviceParams indicates an expected call of NewDeleteNiciraNvpDeviceParams.
func (mr *MockNiciraNVPServiceIfaceMockRecorder) NewDeleteNiciraNvpDeviceParams(nvpdeviceid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeleteNiciraNvpDeviceParams", reflect.TypeOf((*MockNiciraNVPServiceIface)(nil).NewDeleteNiciraNvpDeviceParams), nvpdeviceid)
}

// NewListNiciraNvpDevicesParams mocks base method.
func (m *MockNiciraNVPServiceIface) NewListNiciraNvpDevicesParams() *ListNiciraNvpDevicesParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListNiciraNvpDevicesParams")
	ret0, _ := ret[0].(*ListNiciraNvpDevicesParams)
	return ret0
}

// NewListNiciraNvpDevicesParams indicates an expected call of NewListNiciraNvpDevicesParams.
func (mr *MockNiciraNVPServiceIfaceMockRecorder) NewListNiciraNvpDevicesParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListNiciraNvpDevicesParams", reflect.TypeOf((*MockNiciraNVPServiceIface)(nil).NewListNiciraNvpDevicesParams))
}
