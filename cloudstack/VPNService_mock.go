//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloudstack/VPNService.go

// Package cloudstack is a generated GoMock package.
package cloudstack

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVPNServiceIface is a mock of VPNServiceIface interface.
type MockVPNServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockVPNServiceIfaceMockRecorder
}

// MockVPNServiceIfaceMockRecorder is the mock recorder for MockVPNServiceIface.
type MockVPNServiceIfaceMockRecorder struct {
	mock *MockVPNServiceIface
}

// NewMockVPNServiceIface creates a new mock instance.
func NewMockVPNServiceIface(ctrl *gomock.Controller) *MockVPNServiceIface {
	mock := &MockVPNServiceIface{ctrl: ctrl}
	mock.recorder = &MockVPNServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPNServiceIface) EXPECT() *MockVPNServiceIfaceMockRecorder {
	return m.recorder
}

// AddVpnUser mocks base method.
func (m *MockVPNServiceIface) AddVpnUser(p *AddVpnUserParams) (*AddVpnUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVpnUser", p)
	ret0, _ := ret[0].(*AddVpnUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVpnUser indicates an expected call of AddVpnUser.
func (mr *MockVPNServiceIfaceMockRecorder) AddVpnUser(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVpnUser", reflect.TypeOf((*MockVPNServiceIface)(nil).AddVpnUser), p)
}

// CreateRemoteAccessVpn mocks base method.
func (m *MockVPNServiceIface) CreateRemoteAccessVpn(p *CreateRemoteAccessVpnParams) (*CreateRemoteAccessVpnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemoteAccessVpn", p)
	ret0, _ := ret[0].(*CreateRemoteAccessVpnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemoteAccessVpn indicates an expected call of CreateRemoteAccessVpn.
func (mr *MockVPNServiceIfaceMockRecorder) CreateRemoteAccessVpn(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemoteAccessVpn", reflect.TypeOf((*MockVPNServiceIface)(nil).CreateRemoteAccessVpn), p)
}

// CreateVpnConnection mocks base method.
func (m *MockVPNServiceIface) CreateVpnConnection(p *CreateVpnConnectionParams) (*CreateVpnConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpnConnection", p)
	ret0, _ := ret[0].(*CreateVpnConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpnConnection indicates an expected call of CreateVpnConnection.
func (mr *MockVPNServiceIfaceMockRecorder) CreateVpnConnection(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpnConnection", reflect.TypeOf((*MockVPNServiceIface)(nil).CreateVpnConnection), p)
}

// CreateVpnCustomerGateway mocks base method.
func (m *MockVPNServiceIface) CreateVpnCustomerGateway(p *CreateVpnCustomerGatewayParams) (*CreateVpnCustomerGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpnCustomerGateway", p)
	ret0, _ := ret[0].(*CreateVpnCustomerGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpnCustomerGateway indicates an expected call of CreateVpnCustomerGateway.
func (mr *MockVPNServiceIfaceMockRecorder) CreateVpnCustomerGateway(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpnCustomerGateway", reflect.TypeOf((*MockVPNServiceIface)(nil).CreateVpnCustomerGateway), p)
}

// CreateVpnGateway mocks base method.
func (m *MockVPNServiceIface) CreateVpnGateway(p *CreateVpnGatewayParams) (*CreateVpnGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpnGateway", p)
	ret0, _ := ret[0].(*CreateVpnGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpnGateway indicates an expected call of CreateVpnGateway.
func (mr *MockVPNServiceIfaceMockRecorder) CreateVpnGateway(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpnGateway", reflect.TypeOf((*MockVPNServiceIface)(nil).CreateVpnGateway), p)
}

// DeleteRemoteAccessVpn mocks base method.
func (m *MockVPNServiceIface) DeleteRemoteAccessVpn(p *DeleteRemoteAccessVpnParams) (*DeleteRemoteAccessVpnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemoteAccessVpn", p)
	ret0, _ := ret[0].(*DeleteRemoteAccessVpnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRemoteAccessVpn indicates an expected call of DeleteRemoteAccessVpn.
func (mr *MockVPNServiceIfaceMockRecorder) DeleteRemoteAccessVpn(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemoteAccessVpn", reflect.TypeOf((*MockVPNServiceIface)(nil).DeleteRemoteAccessVpn), p)
}

// DeleteVpnConnection mocks base method.
func (m *MockVPNServiceIface) DeleteVpnConnection(p *DeleteVpnConnectionParams) (*DeleteVpnConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpnConnection", p)
	ret0, _ := ret[0].(*DeleteVpnConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVpnConnection indicates an expected call of DeleteVpnConnection.
func (mr *MockVPNServiceIfaceMockRecorder) DeleteVpnConnection(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpnConnection", reflect.TypeOf((*MockVPNServiceIface)(nil).DeleteVpnConnection), p)
}

// DeleteVpnCustomerGateway mocks base method.
func (m *MockVPNServiceIface) DeleteVpnCustomerGateway(p *DeleteVpnCustomerGatewayParams) (*DeleteVpnCustomerGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpnCustomerGateway", p)
	ret0, _ := ret[0].(*DeleteVpnCustomerGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVpnCustomerGateway indicates an expected call of DeleteVpnCustomerGateway.
func (mr *MockVPNServiceIfaceMockRecorder) DeleteVpnCustomerGateway(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpnCustomerGateway", reflect.TypeOf((*MockVPNServiceIface)(nil).DeleteVpnCustomerGateway), p)
}

// DeleteVpnGateway mocks base method.
func (m *MockVPNServiceIface) DeleteVpnGateway(p *DeleteVpnGatewayParams) (*DeleteVpnGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpnGateway", p)
	ret0, _ := ret[0].(*DeleteVpnGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVpnGateway indicates an expected call of DeleteVpnGateway.
func (mr *MockVPNServiceIfaceMockRecorder) DeleteVpnGateway(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpnGateway", reflect.TypeOf((*MockVPNServiceIface)(nil).DeleteVpnGateway), p)
}

// GetRemoteAccessVpnByID mocks base method.
func (m *MockVPNServiceIface) GetRemoteAccessVpnByID(id string, opts ...OptionFunc) (*RemoteAccessVpn, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRemoteAccessVpnByID", varargs...)
	ret0, _ := ret[0].(*RemoteAccessVpn)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRemoteAccessVpnByID indicates an expected call of GetRemoteAccessVpnByID.
func (mr *MockVPNServiceIfaceMockRecorder) GetRemoteAccessVpnByID(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteAccessVpnByID", reflect.TypeOf((*MockVPNServiceIface)(nil).GetRemoteAccessVpnByID), varargs...)
}

// GetVpnConnectionByID mocks base method.
func (m *MockVPNServiceIface) GetVpnConnectionByID(id string, opts ...OptionFunc) (*VpnConnection, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpnConnectionByID", varargs...)
	ret0, _ := ret[0].(*VpnConnection)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVpnConnectionByID indicates an expected call of GetVpnConnectionByID.
func (mr *MockVPNServiceIfaceMockRecorder) GetVpnConnectionByID(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnConnectionByID", reflect.TypeOf((*MockVPNServiceIface)(nil).GetVpnConnectionByID), varargs...)
}

// GetVpnCustomerGatewayByID mocks base method.
func (m *MockVPNServiceIface) GetVpnCustomerGatewayByID(id string, opts ...OptionFunc) (*VpnCustomerGateway, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpnCustomerGatewayByID", varargs...)
	ret0, _ := ret[0].(*VpnCustomerGateway)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVpnCustomerGatewayByID indicates an expected call of GetVpnCustomerGatewayByID.
func (mr *MockVPNServiceIfaceMockRecorder) GetVpnCustomerGatewayByID(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnCustomerGatewayByID", reflect.TypeOf((*MockVPNServiceIface)(nil).GetVpnCustomerGatewayByID), varargs...)
}

// GetVpnCustomerGatewayByName mocks base method.
func (m *MockVPNServiceIface) GetVpnCustomerGatewayByName(name string, opts ...OptionFunc) (*VpnCustomerGateway, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpnCustomerGatewayByName", varargs...)
	ret0, _ := ret[0].(*VpnCustomerGateway)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVpnCustomerGatewayByName indicates an expected call of GetVpnCustomerGatewayByName.
func (mr *MockVPNServiceIfaceMockRecorder) GetVpnCustomerGatewayByName(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnCustomerGatewayByName", reflect.TypeOf((*MockVPNServiceIface)(nil).GetVpnCustomerGatewayByName), varargs...)
}

// GetVpnCustomerGatewayID mocks base method.
func (m *MockVPNServiceIface) GetVpnCustomerGatewayID(keyword string, opts ...OptionFunc) (string, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{keyword}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpnCustomerGatewayID", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVpnCustomerGatewayID indicates an expected call of GetVpnCustomerGatewayID.
func (mr *MockVPNServiceIfaceMockRecorder) GetVpnCustomerGatewayID(keyword interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{keyword}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnCustomerGatewayID", reflect.TypeOf((*MockVPNServiceIface)(nil).GetVpnCustomerGatewayID), varargs...)
}

// GetVpnGatewayByID mocks base method.
func (m *MockVPNServiceIface) GetVpnGatewayByID(id string, opts ...OptionFunc) (*VpnGateway, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpnGatewayByID", varargs...)
	ret0, _ := ret[0].(*VpnGateway)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVpnGatewayByID indicates an expected call of GetVpnGatewayByID.
func (mr *MockVPNServiceIfaceMockRecorder) GetVpnGatewayByID(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnGatewayByID", reflect.TypeOf((*MockVPNServiceIface)(nil).GetVpnGatewayByID), varargs...)
}

// GetVpnUserByID mocks base method.
func (m *MockVPNServiceIface) GetVpnUserByID(id string, opts ...OptionFunc) (*VpnUser, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpnUserByID", varargs...)
	ret0, _ := ret[0].(*VpnUser)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVpnUserByID indicates an expected call of GetVpnUserByID.
func (mr *MockVPNServiceIfaceMockRecorder) GetVpnUserByID(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnUserByID", reflect.TypeOf((*MockVPNServiceIface)(nil).GetVpnUserByID), varargs...)
}

// ListRemoteAccessVpns mocks base method.
func (m *MockVPNServiceIface) ListRemoteAccessVpns(p *ListRemoteAccessVpnsParams) (*ListRemoteAccessVpnsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemoteAccessVpns", p)
	ret0, _ := ret[0].(*ListRemoteAccessVpnsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoteAccessVpns indicates an expected call of ListRemoteAccessVpns.
func (mr *MockVPNServiceIfaceMockRecorder) ListRemoteAccessVpns(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoteAccessVpns", reflect.TypeOf((*MockVPNServiceIface)(nil).ListRemoteAccessVpns), p)
}

// ListVpnConnections mocks base method.
func (m *MockVPNServiceIface) ListVpnConnections(p *ListVpnConnectionsParams) (*ListVpnConnectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVpnConnections", p)
	ret0, _ := ret[0].(*ListVpnConnectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpnConnections indicates an expected call of ListVpnConnections.
func (mr *MockVPNServiceIfaceMockRecorder) ListVpnConnections(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpnConnections", reflect.TypeOf((*MockVPNServiceIface)(nil).ListVpnConnections), p)
}

// ListVpnCustomerGateways mocks base method.
func (m *MockVPNServiceIface) ListVpnCustomerGateways(p *ListVpnCustomerGatewaysParams) (*ListVpnCustomerGatewaysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVpnCustomerGateways", p)
	ret0, _ := ret[0].(*ListVpnCustomerGatewaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpnCustomerGateways indicates an expected call of ListVpnCustomerGateways.
func (mr *MockVPNServiceIfaceMockRecorder) ListVpnCustomerGateways(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpnCustomerGateways", reflect.TypeOf((*MockVPNServiceIface)(nil).ListVpnCustomerGateways), p)
}

// ListVpnGateways mocks base method.
func (m *MockVPNServiceIface) ListVpnGateways(p *ListVpnGatewaysParams) (*ListVpnGatewaysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVpnGateways", p)
	ret0, _ := ret[0].(*ListVpnGatewaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpnGateways indicates an expected call of ListVpnGateways.
func (mr *MockVPNServiceIfaceMockRecorder) ListVpnGateways(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpnGateways", reflect.TypeOf((*MockVPNServiceIface)(nil).ListVpnGateways), p)
}

// ListVpnUsers mocks base method.
func (m *MockVPNServiceIface) ListVpnUsers(p *ListVpnUsersParams) (*ListVpnUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVpnUsers", p)
	ret0, _ := ret[0].(*ListVpnUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpnUsers indicates an expected call of ListVpnUsers.
func (mr *MockVPNServiceIfaceMockRecorder) ListVpnUsers(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpnUsers", reflect.TypeOf((*MockVPNServiceIface)(nil).ListVpnUsers), p)
}

// NewAddVpnUserParams mocks base method.
func (m *MockVPNServiceIface) NewAddVpnUserParams(password, username string) *AddVpnUserParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAddVpnUserParams", password, username)
	ret0, _ := ret[0].(*AddVpnUserParams)
	return ret0
}

// NewAddVpnUserParams indicates an expected call of NewAddVpnUserParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewAddVpnUserParams(password, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAddVpnUserParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewAddVpnUserParams), password, username)
}

// NewCreateRemoteAccessVpnParams mocks base method.
func (m *MockVPNServiceIface) NewCreateRemoteAccessVpnParams(publicipid string) *CreateRemoteAccessVpnParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreateRemoteAccessVpnParams", publicipid)
	ret0, _ := ret[0].(*CreateRemoteAccessVpnParams)
	return ret0
}

// NewCreateRemoteAccessVpnParams indicates an expected call of NewCreateRemoteAccessVpnParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewCreateRemoteAccessVpnParams(publicipid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreateRemoteAccessVpnParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewCreateRemoteAccessVpnParams), publicipid)
}

// NewCreateVpnConnectionParams mocks base method.
func (m *MockVPNServiceIface) NewCreateVpnConnectionParams(s2scustomergatewayid, s2svpngatewayid string) *CreateVpnConnectionParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreateVpnConnectionParams", s2scustomergatewayid, s2svpngatewayid)
	ret0, _ := ret[0].(*CreateVpnConnectionParams)
	return ret0
}

// NewCreateVpnConnectionParams indicates an expected call of NewCreateVpnConnectionParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewCreateVpnConnectionParams(s2scustomergatewayid, s2svpngatewayid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreateVpnConnectionParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewCreateVpnConnectionParams), s2scustomergatewayid, s2svpngatewayid)
}

// NewCreateVpnCustomerGatewayParams mocks base method.
func (m *MockVPNServiceIface) NewCreateVpnCustomerGatewayParams(cidrlist, esppolicy, gateway, ikepolicy, ipsecpsk string) *CreateVpnCustomerGatewayParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreateVpnCustomerGatewayParams", cidrlist, esppolicy, gateway, ikepolicy, ipsecpsk)
	ret0, _ := ret[0].(*CreateVpnCustomerGatewayParams)
	return ret0
}

// NewCreateVpnCustomerGatewayParams indicates an expected call of NewCreateVpnCustomerGatewayParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewCreateVpnCustomerGatewayParams(cidrlist, esppolicy, gateway, ikepolicy, ipsecpsk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreateVpnCustomerGatewayParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewCreateVpnCustomerGatewayParams), cidrlist, esppolicy, gateway, ikepolicy, ipsecpsk)
}

// NewCreateVpnGatewayParams mocks base method.
func (m *MockVPNServiceIface) NewCreateVpnGatewayParams(vpcid string) *CreateVpnGatewayParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreateVpnGatewayParams", vpcid)
	ret0, _ := ret[0].(*CreateVpnGatewayParams)
	return ret0
}

// NewCreateVpnGatewayParams indicates an expected call of NewCreateVpnGatewayParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewCreateVpnGatewayParams(vpcid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreateVpnGatewayParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewCreateVpnGatewayParams), vpcid)
}

// NewDeleteRemoteAccessVpnParams mocks base method.
func (m *MockVPNServiceIface) NewDeleteRemoteAccessVpnParams(publicipid string) *DeleteRemoteAccessVpnParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDeleteRemoteAccessVpnParams", publicipid)
	ret0, _ := ret[0].(*DeleteRemoteAccessVpnParams)
	return ret0
}

// NewDeleteRemoteAccessVpnParams indicates an expected call of NewDeleteRemoteAccessVpnParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewDeleteRemoteAccessVpnParams(publicipid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeleteRemoteAccessVpnParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewDeleteRemoteAccessVpnParams), publicipid)
}

// NewDeleteVpnConnectionParams mocks base method.
func (m *MockVPNServiceIface) NewDeleteVpnConnectionParams(id string) *DeleteVpnConnectionParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDeleteVpnConnectionParams", id)
	ret0, _ := ret[0].(*DeleteVpnConnectionParams)
	return ret0
}

// NewDeleteVpnConnectionParams indicates an expected call of NewDeleteVpnConnectionParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewDeleteVpnConnectionParams(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeleteVpnConnectionParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewDeleteVpnConnectionParams), id)
}

// NewDeleteVpnCustomerGatewayParams mocks base method.
func (m *MockVPNServiceIface) NewDeleteVpnCustomerGatewayParams(id string) *DeleteVpnCustomerGatewayParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDeleteVpnCustomerGatewayParams", id)
	ret0, _ := ret[0].(*DeleteVpnCustomerGatewayParams)
	return ret0
}

// NewDeleteVpnCustomerGatewayParams indicates an expected call of NewDeleteVpnCustomerGatewayParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewDeleteVpnCustomerGatewayParams(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeleteVpnCustomerGatewayParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewDeleteVpnCustomerGatewayParams), id)
}

// NewDeleteVpnGatewayParams mocks base method.
func (m *MockVPNServiceIface) NewDeleteVpnGatewayParams(id string) *DeleteVpnGatewayParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDeleteVpnGatewayParams", id)
	ret0, _ := ret[0].(*DeleteVpnGatewayParams)
	return ret0
}

// NewDeleteVpnGatewayParams indicates an expected call of NewDeleteVpnGatewayParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewDeleteVpnGatewayParams(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeleteVpnGatewayParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewDeleteVpnGatewayParams), id)
}

// NewListRemoteAccessVpnsParams mocks base method.
func (m *MockVPNServiceIface) NewListRemoteAccessVpnsParams() *ListRemoteAccessVpnsParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListRemoteAccessVpnsParams")
	ret0, _ := ret[0].(*ListRemoteAccessVpnsParams)
	return ret0
}

// NewListRemoteAccessVpnsParams indicates an expected call of NewListRemoteAccessVpnsParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewListRemoteAccessVpnsParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListRemoteAccessVpnsParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewListRemoteAccessVpnsParams))
}

// NewListVpnConnectionsParams mocks base method.
func (m *MockVPNServiceIface) NewListVpnConnectionsParams() *ListVpnConnectionsParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListVpnConnectionsParams")
	ret0, _ := ret[0].(*ListVpnConnectionsParams)
	return ret0
}

// NewListVpnConnectionsParams indicates an expected call of NewListVpnConnectionsParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewListVpnConnectionsParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListVpnConnectionsParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewListVpnConnectionsParams))
}

// NewListVpnCustomerGatewaysParams mocks base method.
func (m *MockVPNServiceIface) NewListVpnCustomerGatewaysParams() *ListVpnCustomerGatewaysParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListVpnCustomerGatewaysParams")
	ret0, _ := ret[0].(*ListVpnCustomerGatewaysParams)
	return ret0
}

// NewListVpnCustomerGatewaysParams indicates an expected call of NewListVpnCustomerGatewaysParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewListVpnCustomerGatewaysParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListVpnCustomerGatewaysParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewListVpnCustomerGatewaysParams))
}

// NewListVpnGatewaysParams mocks base method.
func (m *MockVPNServiceIface) NewListVpnGatewaysParams() *ListVpnGatewaysParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListVpnGatewaysParams")
	ret0, _ := ret[0].(*ListVpnGatewaysParams)
	return ret0
}

// NewListVpnGatewaysParams indicates an expected call of NewListVpnGatewaysParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewListVpnGatewaysParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListVpnGatewaysParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewListVpnGatewaysParams))
}

// NewListVpnUsersParams mocks base method.
func (m *MockVPNServiceIface) NewListVpnUsersParams() *ListVpnUsersParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListVpnUsersParams")
	ret0, _ := ret[0].(*ListVpnUsersParams)
	return ret0
}

// NewListVpnUsersParams indicates an expected call of NewListVpnUsersParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewListVpnUsersParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListVpnUsersParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewListVpnUsersParams))
}

// NewRemoveVpnUserParams mocks base method.
func (m *MockVPNServiceIface) NewRemoveVpnUserParams(username string) *RemoveVpnUserParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRemoveVpnUserParams", username)
	ret0, _ := ret[0].(*RemoveVpnUserParams)
	return ret0
}

// NewRemoveVpnUserParams indicates an expected call of NewRemoveVpnUserParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewRemoveVpnUserParams(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRemoveVpnUserParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewRemoveVpnUserParams), username)
}

// NewResetVpnConnectionParams mocks base method.
func (m *MockVPNServiceIface) NewResetVpnConnectionParams(id string) *ResetVpnConnectionParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewResetVpnConnectionParams", id)
	ret0, _ := ret[0].(*ResetVpnConnectionParams)
	return ret0
}

// NewResetVpnConnectionParams indicates an expected call of NewResetVpnConnectionParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewResetVpnConnectionParams(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewResetVpnConnectionParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewResetVpnConnectionParams), id)
}

// NewUpdateRemoteAccessVpnParams mocks base method.
func (m *MockVPNServiceIface) NewUpdateRemoteAccessVpnParams(id string) *UpdateRemoteAccessVpnParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdateRemoteAccessVpnParams", id)
	ret0, _ := ret[0].(*UpdateRemoteAccessVpnParams)
	return ret0
}

// NewUpdateRemoteAccessVpnParams indicates an expected call of NewUpdateRemoteAccessVpnParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewUpdateRemoteAccessVpnParams(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdateRemoteAccessVpnParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewUpdateRemoteAccessVpnParams), id)
}

// NewUpdateVpnConnectionParams mocks base method.
func (m *MockVPNServiceIface) NewUpdateVpnConnectionParams(id string) *UpdateVpnConnectionParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdateVpnConnectionParams", id)
	ret0, _ := ret[0].(*UpdateVpnConnectionParams)
	return ret0
}

// NewUpdateVpnConnectionParams indicates an expected call of NewUpdateVpnConnectionParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewUpdateVpnConnectionParams(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdateVpnConnectionParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewUpdateVpnConnectionParams), id)
}

// NewUpdateVpnCustomerGatewayParams mocks base method.
func (m *MockVPNServiceIface) NewUpdateVpnCustomerGatewayParams(cidrlist, esppolicy, gateway, id, ikepolicy, ipsecpsk string) *UpdateVpnCustomerGatewayParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdateVpnCustomerGatewayParams", cidrlist, esppolicy, gateway, id, ikepolicy, ipsecpsk)
	ret0, _ := ret[0].(*UpdateVpnCustomerGatewayParams)
	return ret0
}

// NewUpdateVpnCustomerGatewayParams indicates an expected call of NewUpdateVpnCustomerGatewayParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewUpdateVpnCustomerGatewayParams(cidrlist, esppolicy, gateway, id, ikepolicy, ipsecpsk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdateVpnCustomerGatewayParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewUpdateVpnCustomerGatewayParams), cidrlist, esppolicy, gateway, id, ikepolicy, ipsecpsk)
}

// NewUpdateVpnGatewayParams mocks base method.
func (m *MockVPNServiceIface) NewUpdateVpnGatewayParams(id string) *UpdateVpnGatewayParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdateVpnGatewayParams", id)
	ret0, _ := ret[0].(*UpdateVpnGatewayParams)
	return ret0
}

// NewUpdateVpnGatewayParams indicates an expected call of NewUpdateVpnGatewayParams.
func (mr *MockVPNServiceIfaceMockRecorder) NewUpdateVpnGatewayParams(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdateVpnGatewayParams", reflect.TypeOf((*MockVPNServiceIface)(nil).NewUpdateVpnGatewayParams), id)
}

// RemoveVpnUser mocks base method.
func (m *MockVPNServiceIface) RemoveVpnUser(p *RemoveVpnUserParams) (*RemoveVpnUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVpnUser", p)
	ret0, _ := ret[0].(*RemoveVpnUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVpnUser indicates an expected call of RemoveVpnUser.
func (mr *MockVPNServiceIfaceMockRecorder) RemoveVpnUser(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVpnUser", reflect.TypeOf((*MockVPNServiceIface)(nil).RemoveVpnUser), p)
}

// ResetVpnConnection mocks base method.
func (m *MockVPNServiceIface) ResetVpnConnection(p *ResetVpnConnectionParams) (*ResetVpnConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetVpnConnection", p)
	ret0, _ := ret[0].(*ResetVpnConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetVpnConnection indicates an expected call of ResetVpnConnection.
func (mr *MockVPNServiceIfaceMockRecorder) ResetVpnConnection(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetVpnConnection", reflect.TypeOf((*MockVPNServiceIface)(nil).ResetVpnConnection), p)
}

// UpdateRemoteAccessVpn mocks base method.
func (m *MockVPNServiceIface) UpdateRemoteAccessVpn(p *UpdateRemoteAccessVpnParams) (*UpdateRemoteAccessVpnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteAccessVpn", p)
	ret0, _ := ret[0].(*UpdateRemoteAccessVpnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRemoteAccessVpn indicates an expected call of UpdateRemoteAccessVpn.
func (mr *MockVPNServiceIfaceMockRecorder) UpdateRemoteAccessVpn(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteAccessVpn", reflect.TypeOf((*MockVPNServiceIface)(nil).UpdateRemoteAccessVpn), p)
}

// UpdateVpnConnection mocks base method.
func (m *MockVPNServiceIface) UpdateVpnConnection(p *UpdateVpnConnectionParams) (*UpdateVpnConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVpnConnection", p)
	ret0, _ := ret[0].(*UpdateVpnConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVpnConnection indicates an expected call of UpdateVpnConnection.
func (mr *MockVPNServiceIfaceMockRecorder) UpdateVpnConnection(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpnConnection", reflect.TypeOf((*MockVPNServiceIface)(nil).UpdateVpnConnection), p)
}

// UpdateVpnCustomerGateway mocks base method.
func (m *MockVPNServiceIface) UpdateVpnCustomerGateway(p *UpdateVpnCustomerGatewayParams) (*UpdateVpnCustomerGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVpnCustomerGateway", p)
	ret0, _ := ret[0].(*UpdateVpnCustomerGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVpnCustomerGateway indicates an expected call of UpdateVpnCustomerGateway.
func (mr *MockVPNServiceIfaceMockRecorder) UpdateVpnCustomerGateway(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpnCustomerGateway", reflect.TypeOf((*MockVPNServiceIface)(nil).UpdateVpnCustomerGateway), p)
}

// UpdateVpnGateway mocks base method.
func (m *MockVPNServiceIface) UpdateVpnGateway(p *UpdateVpnGatewayParams) (*UpdateVpnGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVpnGateway", p)
	ret0, _ := ret[0].(*UpdateVpnGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVpnGateway indicates an expected call of UpdateVpnGateway.
func (mr *MockVPNServiceIfaceMockRecorder) UpdateVpnGateway(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpnGateway", reflect.TypeOf((*MockVPNServiceIface)(nil).UpdateVpnGateway), p)
}
