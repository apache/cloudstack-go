//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloudstack/IPQuarantineService.go
//
// Generated by this command:
//
//	mockgen -destination=./cloudstack/IPQuarantineService_mock.go -package=cloudstack -copyright_file=header.txt -source=./cloudstack/IPQuarantineService.go
//

// Package cloudstack is a generated GoMock package.
package cloudstack

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPQuarantineServiceIface is a mock of IPQuarantineServiceIface interface.
type MockIPQuarantineServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockIPQuarantineServiceIfaceMockRecorder
	isgomock struct{}
}

// MockIPQuarantineServiceIfaceMockRecorder is the mock recorder for MockIPQuarantineServiceIface.
type MockIPQuarantineServiceIfaceMockRecorder struct {
	mock *MockIPQuarantineServiceIface
}

// NewMockIPQuarantineServiceIface creates a new mock instance.
func NewMockIPQuarantineServiceIface(ctrl *gomock.Controller) *MockIPQuarantineServiceIface {
	mock := &MockIPQuarantineServiceIface{ctrl: ctrl}
	mock.recorder = &MockIPQuarantineServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPQuarantineServiceIface) EXPECT() *MockIPQuarantineServiceIfaceMockRecorder {
	return m.recorder
}

// ListQuarantinedIps mocks base method.
func (m *MockIPQuarantineServiceIface) ListQuarantinedIps(p *ListQuarantinedIpsParams) (*ListQuarantinedIpsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuarantinedIps", p)
	ret0, _ := ret[0].(*ListQuarantinedIpsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuarantinedIps indicates an expected call of ListQuarantinedIps.
func (mr *MockIPQuarantineServiceIfaceMockRecorder) ListQuarantinedIps(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuarantinedIps", reflect.TypeOf((*MockIPQuarantineServiceIface)(nil).ListQuarantinedIps), p)
}

// NewListQuarantinedIpsParams mocks base method.
func (m *MockIPQuarantineServiceIface) NewListQuarantinedIpsParams() *ListQuarantinedIpsParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListQuarantinedIpsParams")
	ret0, _ := ret[0].(*ListQuarantinedIpsParams)
	return ret0
}

// NewListQuarantinedIpsParams indicates an expected call of NewListQuarantinedIpsParams.
func (mr *MockIPQuarantineServiceIfaceMockRecorder) NewListQuarantinedIpsParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListQuarantinedIpsParams", reflect.TypeOf((*MockIPQuarantineServiceIface)(nil).NewListQuarantinedIpsParams))
}

// NewRemoveQuarantinedIpParams mocks base method.
func (m *MockIPQuarantineServiceIface) NewRemoveQuarantinedIpParams(removalreason string) *RemoveQuarantinedIpParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRemoveQuarantinedIpParams", removalreason)
	ret0, _ := ret[0].(*RemoveQuarantinedIpParams)
	return ret0
}

// NewRemoveQuarantinedIpParams indicates an expected call of NewRemoveQuarantinedIpParams.
func (mr *MockIPQuarantineServiceIfaceMockRecorder) NewRemoveQuarantinedIpParams(removalreason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRemoveQuarantinedIpParams", reflect.TypeOf((*MockIPQuarantineServiceIface)(nil).NewRemoveQuarantinedIpParams), removalreason)
}

// NewUpdateQuarantinedIpParams mocks base method.
func (m *MockIPQuarantineServiceIface) NewUpdateQuarantinedIpParams(enddate string) *UpdateQuarantinedIpParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdateQuarantinedIpParams", enddate)
	ret0, _ := ret[0].(*UpdateQuarantinedIpParams)
	return ret0
}

// NewUpdateQuarantinedIpParams indicates an expected call of NewUpdateQuarantinedIpParams.
func (mr *MockIPQuarantineServiceIfaceMockRecorder) NewUpdateQuarantinedIpParams(enddate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdateQuarantinedIpParams", reflect.TypeOf((*MockIPQuarantineServiceIface)(nil).NewUpdateQuarantinedIpParams), enddate)
}

// RemoveQuarantinedIp mocks base method.
func (m *MockIPQuarantineServiceIface) RemoveQuarantinedIp(p *RemoveQuarantinedIpParams) (*RemoveQuarantinedIpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveQuarantinedIp", p)
	ret0, _ := ret[0].(*RemoveQuarantinedIpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveQuarantinedIp indicates an expected call of RemoveQuarantinedIp.
func (mr *MockIPQuarantineServiceIfaceMockRecorder) RemoveQuarantinedIp(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveQuarantinedIp", reflect.TypeOf((*MockIPQuarantineServiceIface)(nil).RemoveQuarantinedIp), p)
}

// UpdateQuarantinedIp mocks base method.
func (m *MockIPQuarantineServiceIface) UpdateQuarantinedIp(p *UpdateQuarantinedIpParams) (*UpdateQuarantinedIpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuarantinedIp", p)
	ret0, _ := ret[0].(*UpdateQuarantinedIpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuarantinedIp indicates an expected call of UpdateQuarantinedIp.
func (mr *MockIPQuarantineServiceIfaceMockRecorder) UpdateQuarantinedIp(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuarantinedIp", reflect.TypeOf((*MockIPQuarantineServiceIface)(nil).UpdateQuarantinedIp), p)
}
