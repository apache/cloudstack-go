//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloudstack/ConsoleEndpointService.go

// Package cloudstack is a generated GoMock package.
package cloudstack

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConsoleEndpointServiceIface is a mock of ConsoleEndpointServiceIface interface.
type MockConsoleEndpointServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockConsoleEndpointServiceIfaceMockRecorder
}

// MockConsoleEndpointServiceIfaceMockRecorder is the mock recorder for MockConsoleEndpointServiceIface.
type MockConsoleEndpointServiceIfaceMockRecorder struct {
	mock *MockConsoleEndpointServiceIface
}

// NewMockConsoleEndpointServiceIface creates a new mock instance.
func NewMockConsoleEndpointServiceIface(ctrl *gomock.Controller) *MockConsoleEndpointServiceIface {
	mock := &MockConsoleEndpointServiceIface{ctrl: ctrl}
	mock.recorder = &MockConsoleEndpointServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsoleEndpointServiceIface) EXPECT() *MockConsoleEndpointServiceIfaceMockRecorder {
	return m.recorder
}

// CreateConsoleEndpoint mocks base method.
func (m *MockConsoleEndpointServiceIface) CreateConsoleEndpoint(p *CreateConsoleEndpointParams) (*CreateConsoleEndpointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsoleEndpoint", p)
	ret0, _ := ret[0].(*CreateConsoleEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsoleEndpoint indicates an expected call of CreateConsoleEndpoint.
func (mr *MockConsoleEndpointServiceIfaceMockRecorder) CreateConsoleEndpoint(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsoleEndpoint", reflect.TypeOf((*MockConsoleEndpointServiceIface)(nil).CreateConsoleEndpoint), p)
}

// NewCreateConsoleEndpointParams mocks base method.
func (m *MockConsoleEndpointServiceIface) NewCreateConsoleEndpointParams(virtualmachineid string) *CreateConsoleEndpointParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreateConsoleEndpointParams", virtualmachineid)
	ret0, _ := ret[0].(*CreateConsoleEndpointParams)
	return ret0
}

// NewCreateConsoleEndpointParams indicates an expected call of NewCreateConsoleEndpointParams.
func (mr *MockConsoleEndpointServiceIfaceMockRecorder) NewCreateConsoleEndpointParams(virtualmachineid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreateConsoleEndpointParams", reflect.TypeOf((*MockConsoleEndpointServiceIface)(nil).NewCreateConsoleEndpointParams), virtualmachineid)
}
