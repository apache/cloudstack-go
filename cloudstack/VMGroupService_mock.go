//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloudstack/VMGroupService.go

// Package cloudstack is a generated GoMock package.
package cloudstack

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVMGroupServiceIface is a mock of VMGroupServiceIface interface.
type MockVMGroupServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockVMGroupServiceIfaceMockRecorder
}

// MockVMGroupServiceIfaceMockRecorder is the mock recorder for MockVMGroupServiceIface.
type MockVMGroupServiceIfaceMockRecorder struct {
	mock *MockVMGroupServiceIface
}

// NewMockVMGroupServiceIface creates a new mock instance.
func NewMockVMGroupServiceIface(ctrl *gomock.Controller) *MockVMGroupServiceIface {
	mock := &MockVMGroupServiceIface{ctrl: ctrl}
	mock.recorder = &MockVMGroupServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVMGroupServiceIface) EXPECT() *MockVMGroupServiceIfaceMockRecorder {
	return m.recorder
}

// CreateInstanceGroup mocks base method.
func (m *MockVMGroupServiceIface) CreateInstanceGroup(p *CreateInstanceGroupParams) (*CreateInstanceGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceGroup", p)
	ret0, _ := ret[0].(*CreateInstanceGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceGroup indicates an expected call of CreateInstanceGroup.
func (mr *MockVMGroupServiceIfaceMockRecorder) CreateInstanceGroup(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceGroup", reflect.TypeOf((*MockVMGroupServiceIface)(nil).CreateInstanceGroup), p)
}

// DeleteInstanceGroup mocks base method.
func (m *MockVMGroupServiceIface) DeleteInstanceGroup(p *DeleteInstanceGroupParams) (*DeleteInstanceGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceGroup", p)
	ret0, _ := ret[0].(*DeleteInstanceGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceGroup indicates an expected call of DeleteInstanceGroup.
func (mr *MockVMGroupServiceIfaceMockRecorder) DeleteInstanceGroup(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceGroup", reflect.TypeOf((*MockVMGroupServiceIface)(nil).DeleteInstanceGroup), p)
}

// GetInstanceGroupByID mocks base method.
func (m *MockVMGroupServiceIface) GetInstanceGroupByID(id string, opts ...OptionFunc) (*InstanceGroup, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceGroupByID", varargs...)
	ret0, _ := ret[0].(*InstanceGroup)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceGroupByID indicates an expected call of GetInstanceGroupByID.
func (mr *MockVMGroupServiceIfaceMockRecorder) GetInstanceGroupByID(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceGroupByID", reflect.TypeOf((*MockVMGroupServiceIface)(nil).GetInstanceGroupByID), varargs...)
}

// GetInstanceGroupByName mocks base method.
func (m *MockVMGroupServiceIface) GetInstanceGroupByName(name string, opts ...OptionFunc) (*InstanceGroup, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceGroupByName", varargs...)
	ret0, _ := ret[0].(*InstanceGroup)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceGroupByName indicates an expected call of GetInstanceGroupByName.
func (mr *MockVMGroupServiceIfaceMockRecorder) GetInstanceGroupByName(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceGroupByName", reflect.TypeOf((*MockVMGroupServiceIface)(nil).GetInstanceGroupByName), varargs...)
}

// GetInstanceGroupID mocks base method.
func (m *MockVMGroupServiceIface) GetInstanceGroupID(name string, opts ...OptionFunc) (string, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceGroupID", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceGroupID indicates an expected call of GetInstanceGroupID.
func (mr *MockVMGroupServiceIfaceMockRecorder) GetInstanceGroupID(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceGroupID", reflect.TypeOf((*MockVMGroupServiceIface)(nil).GetInstanceGroupID), varargs...)
}

// ListInstanceGroups mocks base method.
func (m *MockVMGroupServiceIface) ListInstanceGroups(p *ListInstanceGroupsParams) (*ListInstanceGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceGroups", p)
	ret0, _ := ret[0].(*ListInstanceGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceGroups indicates an expected call of ListInstanceGroups.
func (mr *MockVMGroupServiceIfaceMockRecorder) ListInstanceGroups(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceGroups", reflect.TypeOf((*MockVMGroupServiceIface)(nil).ListInstanceGroups), p)
}

// NewCreateInstanceGroupParams mocks base method.
func (m *MockVMGroupServiceIface) NewCreateInstanceGroupParams(name string) *CreateInstanceGroupParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreateInstanceGroupParams", name)
	ret0, _ := ret[0].(*CreateInstanceGroupParams)
	return ret0
}

// NewCreateInstanceGroupParams indicates an expected call of NewCreateInstanceGroupParams.
func (mr *MockVMGroupServiceIfaceMockRecorder) NewCreateInstanceGroupParams(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreateInstanceGroupParams", reflect.TypeOf((*MockVMGroupServiceIface)(nil).NewCreateInstanceGroupParams), name)
}

// NewDeleteInstanceGroupParams mocks base method.
func (m *MockVMGroupServiceIface) NewDeleteInstanceGroupParams(id string) *DeleteInstanceGroupParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDeleteInstanceGroupParams", id)
	ret0, _ := ret[0].(*DeleteInstanceGroupParams)
	return ret0
}

// NewDeleteInstanceGroupParams indicates an expected call of NewDeleteInstanceGroupParams.
func (mr *MockVMGroupServiceIfaceMockRecorder) NewDeleteInstanceGroupParams(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeleteInstanceGroupParams", reflect.TypeOf((*MockVMGroupServiceIface)(nil).NewDeleteInstanceGroupParams), id)
}

// NewListInstanceGroupsParams mocks base method.
func (m *MockVMGroupServiceIface) NewListInstanceGroupsParams() *ListInstanceGroupsParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInstanceGroupsParams")
	ret0, _ := ret[0].(*ListInstanceGroupsParams)
	return ret0
}

// NewListInstanceGroupsParams indicates an expected call of NewListInstanceGroupsParams.
func (mr *MockVMGroupServiceIfaceMockRecorder) NewListInstanceGroupsParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInstanceGroupsParams", reflect.TypeOf((*MockVMGroupServiceIface)(nil).NewListInstanceGroupsParams))
}

// NewUpdateInstanceGroupParams mocks base method.
func (m *MockVMGroupServiceIface) NewUpdateInstanceGroupParams(id string) *UpdateInstanceGroupParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdateInstanceGroupParams", id)
	ret0, _ := ret[0].(*UpdateInstanceGroupParams)
	return ret0
}

// NewUpdateInstanceGroupParams indicates an expected call of NewUpdateInstanceGroupParams.
func (mr *MockVMGroupServiceIfaceMockRecorder) NewUpdateInstanceGroupParams(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdateInstanceGroupParams", reflect.TypeOf((*MockVMGroupServiceIface)(nil).NewUpdateInstanceGroupParams), id)
}

// UpdateInstanceGroup mocks base method.
func (m *MockVMGroupServiceIface) UpdateInstanceGroup(p *UpdateInstanceGroupParams) (*UpdateInstanceGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceGroup", p)
	ret0, _ := ret[0].(*UpdateInstanceGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceGroup indicates an expected call of UpdateInstanceGroup.
func (mr *MockVMGroupServiceIfaceMockRecorder) UpdateInstanceGroup(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceGroup", reflect.TypeOf((*MockVMGroupServiceIface)(nil).UpdateInstanceGroup), p)
}
