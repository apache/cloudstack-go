//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloudstack/SSHService.go

// Package cloudstack is a generated GoMock package.
package cloudstack

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSSHServiceIface is a mock of SSHServiceIface interface.
type MockSSHServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockSSHServiceIfaceMockRecorder
}

// MockSSHServiceIfaceMockRecorder is the mock recorder for MockSSHServiceIface.
type MockSSHServiceIfaceMockRecorder struct {
	mock *MockSSHServiceIface
}

// NewMockSSHServiceIface creates a new mock instance.
func NewMockSSHServiceIface(ctrl *gomock.Controller) *MockSSHServiceIface {
	mock := &MockSSHServiceIface{ctrl: ctrl}
	mock.recorder = &MockSSHServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHServiceIface) EXPECT() *MockSSHServiceIfaceMockRecorder {
	return m.recorder
}

// CreateSSHKeyPair mocks base method.
func (m *MockSSHServiceIface) CreateSSHKeyPair(p *CreateSSHKeyPairParams) (*CreateSSHKeyPairResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSSHKeyPair", p)
	ret0, _ := ret[0].(*CreateSSHKeyPairResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSSHKeyPair indicates an expected call of CreateSSHKeyPair.
func (mr *MockSSHServiceIfaceMockRecorder) CreateSSHKeyPair(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSSHKeyPair", reflect.TypeOf((*MockSSHServiceIface)(nil).CreateSSHKeyPair), p)
}

// DeleteSSHKeyPair mocks base method.
func (m *MockSSHServiceIface) DeleteSSHKeyPair(p *DeleteSSHKeyPairParams) (*DeleteSSHKeyPairResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSSHKeyPair", p)
	ret0, _ := ret[0].(*DeleteSSHKeyPairResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSSHKeyPair indicates an expected call of DeleteSSHKeyPair.
func (mr *MockSSHServiceIfaceMockRecorder) DeleteSSHKeyPair(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSSHKeyPair", reflect.TypeOf((*MockSSHServiceIface)(nil).DeleteSSHKeyPair), p)
}

// GetSSHKeyPairByID mocks base method.
func (m *MockSSHServiceIface) GetSSHKeyPairByID(id string, opts ...OptionFunc) (*SSHKeyPair, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSSHKeyPairByID", varargs...)
	ret0, _ := ret[0].(*SSHKeyPair)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSSHKeyPairByID indicates an expected call of GetSSHKeyPairByID.
func (mr *MockSSHServiceIfaceMockRecorder) GetSSHKeyPairByID(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHKeyPairByID", reflect.TypeOf((*MockSSHServiceIface)(nil).GetSSHKeyPairByID), varargs...)
}

// GetSSHKeyPairByName mocks base method.
func (m *MockSSHServiceIface) GetSSHKeyPairByName(name string, opts ...OptionFunc) (*SSHKeyPair, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSSHKeyPairByName", varargs...)
	ret0, _ := ret[0].(*SSHKeyPair)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSSHKeyPairByName indicates an expected call of GetSSHKeyPairByName.
func (mr *MockSSHServiceIfaceMockRecorder) GetSSHKeyPairByName(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHKeyPairByName", reflect.TypeOf((*MockSSHServiceIface)(nil).GetSSHKeyPairByName), varargs...)
}

// GetSSHKeyPairID mocks base method.
func (m *MockSSHServiceIface) GetSSHKeyPairID(name string, opts ...OptionFunc) (string, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSSHKeyPairID", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSSHKeyPairID indicates an expected call of GetSSHKeyPairID.
func (mr *MockSSHServiceIfaceMockRecorder) GetSSHKeyPairID(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHKeyPairID", reflect.TypeOf((*MockSSHServiceIface)(nil).GetSSHKeyPairID), varargs...)
}

// ListSSHKeyPairs mocks base method.
func (m *MockSSHServiceIface) ListSSHKeyPairs(p *ListSSHKeyPairsParams) (*ListSSHKeyPairsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSSHKeyPairs", p)
	ret0, _ := ret[0].(*ListSSHKeyPairsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSSHKeyPairs indicates an expected call of ListSSHKeyPairs.
func (mr *MockSSHServiceIfaceMockRecorder) ListSSHKeyPairs(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSSHKeyPairs", reflect.TypeOf((*MockSSHServiceIface)(nil).ListSSHKeyPairs), p)
}

// NewCreateSSHKeyPairParams mocks base method.
func (m *MockSSHServiceIface) NewCreateSSHKeyPairParams(name string) *CreateSSHKeyPairParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreateSSHKeyPairParams", name)
	ret0, _ := ret[0].(*CreateSSHKeyPairParams)
	return ret0
}

// NewCreateSSHKeyPairParams indicates an expected call of NewCreateSSHKeyPairParams.
func (mr *MockSSHServiceIfaceMockRecorder) NewCreateSSHKeyPairParams(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreateSSHKeyPairParams", reflect.TypeOf((*MockSSHServiceIface)(nil).NewCreateSSHKeyPairParams), name)
}

// NewDeleteSSHKeyPairParams mocks base method.
func (m *MockSSHServiceIface) NewDeleteSSHKeyPairParams(name string) *DeleteSSHKeyPairParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDeleteSSHKeyPairParams", name)
	ret0, _ := ret[0].(*DeleteSSHKeyPairParams)
	return ret0
}

// NewDeleteSSHKeyPairParams indicates an expected call of NewDeleteSSHKeyPairParams.
func (mr *MockSSHServiceIfaceMockRecorder) NewDeleteSSHKeyPairParams(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeleteSSHKeyPairParams", reflect.TypeOf((*MockSSHServiceIface)(nil).NewDeleteSSHKeyPairParams), name)
}

// NewListSSHKeyPairsParams mocks base method.
func (m *MockSSHServiceIface) NewListSSHKeyPairsParams() *ListSSHKeyPairsParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSSHKeyPairsParams")
	ret0, _ := ret[0].(*ListSSHKeyPairsParams)
	return ret0
}

// NewListSSHKeyPairsParams indicates an expected call of NewListSSHKeyPairsParams.
func (mr *MockSSHServiceIfaceMockRecorder) NewListSSHKeyPairsParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSSHKeyPairsParams", reflect.TypeOf((*MockSSHServiceIface)(nil).NewListSSHKeyPairsParams))
}

// NewRegisterSSHKeyPairParams mocks base method.
func (m *MockSSHServiceIface) NewRegisterSSHKeyPairParams(name, publickey string) *RegisterSSHKeyPairParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRegisterSSHKeyPairParams", name, publickey)
	ret0, _ := ret[0].(*RegisterSSHKeyPairParams)
	return ret0
}

// NewRegisterSSHKeyPairParams indicates an expected call of NewRegisterSSHKeyPairParams.
func (mr *MockSSHServiceIfaceMockRecorder) NewRegisterSSHKeyPairParams(name, publickey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRegisterSSHKeyPairParams", reflect.TypeOf((*MockSSHServiceIface)(nil).NewRegisterSSHKeyPairParams), name, publickey)
}

// NewResetSSHKeyForVirtualMachineParams mocks base method.
func (m *MockSSHServiceIface) NewResetSSHKeyForVirtualMachineParams(id string) *ResetSSHKeyForVirtualMachineParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewResetSSHKeyForVirtualMachineParams", id)
	ret0, _ := ret[0].(*ResetSSHKeyForVirtualMachineParams)
	return ret0
}

// NewResetSSHKeyForVirtualMachineParams indicates an expected call of NewResetSSHKeyForVirtualMachineParams.
func (mr *MockSSHServiceIfaceMockRecorder) NewResetSSHKeyForVirtualMachineParams(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewResetSSHKeyForVirtualMachineParams", reflect.TypeOf((*MockSSHServiceIface)(nil).NewResetSSHKeyForVirtualMachineParams), id)
}

// RegisterSSHKeyPair mocks base method.
func (m *MockSSHServiceIface) RegisterSSHKeyPair(p *RegisterSSHKeyPairParams) (*RegisterSSHKeyPairResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSSHKeyPair", p)
	ret0, _ := ret[0].(*RegisterSSHKeyPairResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSSHKeyPair indicates an expected call of RegisterSSHKeyPair.
func (mr *MockSSHServiceIfaceMockRecorder) RegisterSSHKeyPair(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSSHKeyPair", reflect.TypeOf((*MockSSHServiceIface)(nil).RegisterSSHKeyPair), p)
}

// ResetSSHKeyForVirtualMachine mocks base method.
func (m *MockSSHServiceIface) ResetSSHKeyForVirtualMachine(p *ResetSSHKeyForVirtualMachineParams) (*ResetSSHKeyForVirtualMachineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSSHKeyForVirtualMachine", p)
	ret0, _ := ret[0].(*ResetSSHKeyForVirtualMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetSSHKeyForVirtualMachine indicates an expected call of ResetSSHKeyForVirtualMachine.
func (mr *MockSSHServiceIfaceMockRecorder) ResetSSHKeyForVirtualMachine(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSSHKeyForVirtualMachine", reflect.TypeOf((*MockSSHServiceIface)(nil).ResetSSHKeyForVirtualMachine), p)
}
