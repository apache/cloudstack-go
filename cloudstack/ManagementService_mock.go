//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloudstack/ManagementService.go

// Package cloudstack is a generated GoMock package.
package cloudstack

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManagementServiceIface is a mock of ManagementServiceIface interface.
type MockManagementServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockManagementServiceIfaceMockRecorder
}

// MockManagementServiceIfaceMockRecorder is the mock recorder for MockManagementServiceIface.
type MockManagementServiceIfaceMockRecorder struct {
	mock *MockManagementServiceIface
}

// NewMockManagementServiceIface creates a new mock instance.
func NewMockManagementServiceIface(ctrl *gomock.Controller) *MockManagementServiceIface {
	mock := &MockManagementServiceIface{ctrl: ctrl}
	mock.recorder = &MockManagementServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementServiceIface) EXPECT() *MockManagementServiceIfaceMockRecorder {
	return m.recorder
}

// GetManagementServerByID mocks base method.
func (m *MockManagementServiceIface) GetManagementServerByID(id string, opts ...OptionFunc) (*ManagementServer, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetManagementServerByID", varargs...)
	ret0, _ := ret[0].(*ManagementServer)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManagementServerByID indicates an expected call of GetManagementServerByID.
func (mr *MockManagementServiceIfaceMockRecorder) GetManagementServerByID(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagementServerByID", reflect.TypeOf((*MockManagementServiceIface)(nil).GetManagementServerByID), varargs...)
}

// GetManagementServerByName mocks base method.
func (m *MockManagementServiceIface) GetManagementServerByName(name string, opts ...OptionFunc) (*ManagementServer, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetManagementServerByName", varargs...)
	ret0, _ := ret[0].(*ManagementServer)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManagementServerByName indicates an expected call of GetManagementServerByName.
func (mr *MockManagementServiceIfaceMockRecorder) GetManagementServerByName(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagementServerByName", reflect.TypeOf((*MockManagementServiceIface)(nil).GetManagementServerByName), varargs...)
}

// GetManagementServerID mocks base method.
func (m *MockManagementServiceIface) GetManagementServerID(name string, opts ...OptionFunc) (string, int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetManagementServerID", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManagementServerID indicates an expected call of GetManagementServerID.
func (mr *MockManagementServiceIfaceMockRecorder) GetManagementServerID(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagementServerID", reflect.TypeOf((*MockManagementServiceIface)(nil).GetManagementServerID), varargs...)
}

// ListManagementServers mocks base method.
func (m *MockManagementServiceIface) ListManagementServers(p *ListManagementServersParams) (*ListManagementServersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagementServers", p)
	ret0, _ := ret[0].(*ListManagementServersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagementServers indicates an expected call of ListManagementServers.
func (mr *MockManagementServiceIfaceMockRecorder) ListManagementServers(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagementServers", reflect.TypeOf((*MockManagementServiceIface)(nil).ListManagementServers), p)
}

// NewListManagementServersParams mocks base method.
func (m *MockManagementServiceIface) NewListManagementServersParams() *ListManagementServersParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListManagementServersParams")
	ret0, _ := ret[0].(*ListManagementServersParams)
	return ret0
}

// NewListManagementServersParams indicates an expected call of NewListManagementServersParams.
func (mr *MockManagementServiceIfaceMockRecorder) NewListManagementServersParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListManagementServersParams", reflect.TypeOf((*MockManagementServiceIface)(nil).NewListManagementServersParams))
}
