//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloudstack/CertificateService.go
//
// Generated by this command:
//
//	mockgen -destination=./cloudstack/CertificateService_mock.go -package=cloudstack -copyright_file=header.txt -source=./cloudstack/CertificateService.go
//

// Package cloudstack is a generated GoMock package.
package cloudstack

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCertificateServiceIface is a mock of CertificateServiceIface interface.
type MockCertificateServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateServiceIfaceMockRecorder
	isgomock struct{}
}

// MockCertificateServiceIfaceMockRecorder is the mock recorder for MockCertificateServiceIface.
type MockCertificateServiceIfaceMockRecorder struct {
	mock *MockCertificateServiceIface
}

// NewMockCertificateServiceIface creates a new mock instance.
func NewMockCertificateServiceIface(ctrl *gomock.Controller) *MockCertificateServiceIface {
	mock := &MockCertificateServiceIface{ctrl: ctrl}
	mock.recorder = &MockCertificateServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateServiceIface) EXPECT() *MockCertificateServiceIfaceMockRecorder {
	return m.recorder
}

// GetTemplateDirectDownloadCertificateByID mocks base method.
func (m *MockCertificateServiceIface) GetTemplateDirectDownloadCertificateByID(id string, opts ...OptionFunc) (*TemplateDirectDownloadCertificate, int, error) {
	m.ctrl.T.Helper()
	varargs := []any{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplateDirectDownloadCertificateByID", varargs...)
	ret0, _ := ret[0].(*TemplateDirectDownloadCertificate)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTemplateDirectDownloadCertificateByID indicates an expected call of GetTemplateDirectDownloadCertificateByID.
func (mr *MockCertificateServiceIfaceMockRecorder) GetTemplateDirectDownloadCertificateByID(id any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateDirectDownloadCertificateByID", reflect.TypeOf((*MockCertificateServiceIface)(nil).GetTemplateDirectDownloadCertificateByID), varargs...)
}

// IssueCertificate mocks base method.
func (m *MockCertificateServiceIface) IssueCertificate(p *IssueCertificateParams) (*IssueCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCertificate", p)
	ret0, _ := ret[0].(*IssueCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertificate indicates an expected call of IssueCertificate.
func (mr *MockCertificateServiceIfaceMockRecorder) IssueCertificate(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificate", reflect.TypeOf((*MockCertificateServiceIface)(nil).IssueCertificate), p)
}

// ListCAProviders mocks base method.
func (m *MockCertificateServiceIface) ListCAProviders(p *ListCAProvidersParams) (*ListCAProvidersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCAProviders", p)
	ret0, _ := ret[0].(*ListCAProvidersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCAProviders indicates an expected call of ListCAProviders.
func (mr *MockCertificateServiceIfaceMockRecorder) ListCAProviders(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCAProviders", reflect.TypeOf((*MockCertificateServiceIface)(nil).ListCAProviders), p)
}

// ListCaCertificate mocks base method.
func (m *MockCertificateServiceIface) ListCaCertificate(p *ListCaCertificateParams) (*ListCaCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCaCertificate", p)
	ret0, _ := ret[0].(*ListCaCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCaCertificate indicates an expected call of ListCaCertificate.
func (mr *MockCertificateServiceIfaceMockRecorder) ListCaCertificate(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCaCertificate", reflect.TypeOf((*MockCertificateServiceIface)(nil).ListCaCertificate), p)
}

// ListTemplateDirectDownloadCertificates mocks base method.
func (m *MockCertificateServiceIface) ListTemplateDirectDownloadCertificates(p *ListTemplateDirectDownloadCertificatesParams) (*ListTemplateDirectDownloadCertificatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateDirectDownloadCertificates", p)
	ret0, _ := ret[0].(*ListTemplateDirectDownloadCertificatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplateDirectDownloadCertificates indicates an expected call of ListTemplateDirectDownloadCertificates.
func (mr *MockCertificateServiceIfaceMockRecorder) ListTemplateDirectDownloadCertificates(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateDirectDownloadCertificates", reflect.TypeOf((*MockCertificateServiceIface)(nil).ListTemplateDirectDownloadCertificates), p)
}

// NewIssueCertificateParams mocks base method.
func (m *MockCertificateServiceIface) NewIssueCertificateParams() *IssueCertificateParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIssueCertificateParams")
	ret0, _ := ret[0].(*IssueCertificateParams)
	return ret0
}

// NewIssueCertificateParams indicates an expected call of NewIssueCertificateParams.
func (mr *MockCertificateServiceIfaceMockRecorder) NewIssueCertificateParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIssueCertificateParams", reflect.TypeOf((*MockCertificateServiceIface)(nil).NewIssueCertificateParams))
}

// NewListCAProvidersParams mocks base method.
func (m *MockCertificateServiceIface) NewListCAProvidersParams() *ListCAProvidersParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListCAProvidersParams")
	ret0, _ := ret[0].(*ListCAProvidersParams)
	return ret0
}

// NewListCAProvidersParams indicates an expected call of NewListCAProvidersParams.
func (mr *MockCertificateServiceIfaceMockRecorder) NewListCAProvidersParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListCAProvidersParams", reflect.TypeOf((*MockCertificateServiceIface)(nil).NewListCAProvidersParams))
}

// NewListCaCertificateParams mocks base method.
func (m *MockCertificateServiceIface) NewListCaCertificateParams() *ListCaCertificateParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListCaCertificateParams")
	ret0, _ := ret[0].(*ListCaCertificateParams)
	return ret0
}

// NewListCaCertificateParams indicates an expected call of NewListCaCertificateParams.
func (mr *MockCertificateServiceIfaceMockRecorder) NewListCaCertificateParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListCaCertificateParams", reflect.TypeOf((*MockCertificateServiceIface)(nil).NewListCaCertificateParams))
}

// NewListTemplateDirectDownloadCertificatesParams mocks base method.
func (m *MockCertificateServiceIface) NewListTemplateDirectDownloadCertificatesParams() *ListTemplateDirectDownloadCertificatesParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListTemplateDirectDownloadCertificatesParams")
	ret0, _ := ret[0].(*ListTemplateDirectDownloadCertificatesParams)
	return ret0
}

// NewListTemplateDirectDownloadCertificatesParams indicates an expected call of NewListTemplateDirectDownloadCertificatesParams.
func (mr *MockCertificateServiceIfaceMockRecorder) NewListTemplateDirectDownloadCertificatesParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListTemplateDirectDownloadCertificatesParams", reflect.TypeOf((*MockCertificateServiceIface)(nil).NewListTemplateDirectDownloadCertificatesParams))
}

// NewProvisionCertificateParams mocks base method.
func (m *MockCertificateServiceIface) NewProvisionCertificateParams(hostid string) *ProvisionCertificateParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProvisionCertificateParams", hostid)
	ret0, _ := ret[0].(*ProvisionCertificateParams)
	return ret0
}

// NewProvisionCertificateParams indicates an expected call of NewProvisionCertificateParams.
func (mr *MockCertificateServiceIfaceMockRecorder) NewProvisionCertificateParams(hostid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProvisionCertificateParams", reflect.TypeOf((*MockCertificateServiceIface)(nil).NewProvisionCertificateParams), hostid)
}

// NewProvisionTemplateDirectDownloadCertificateParams mocks base method.
func (m *MockCertificateServiceIface) NewProvisionTemplateDirectDownloadCertificateParams(hostid, id string) *ProvisionTemplateDirectDownloadCertificateParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProvisionTemplateDirectDownloadCertificateParams", hostid, id)
	ret0, _ := ret[0].(*ProvisionTemplateDirectDownloadCertificateParams)
	return ret0
}

// NewProvisionTemplateDirectDownloadCertificateParams indicates an expected call of NewProvisionTemplateDirectDownloadCertificateParams.
func (mr *MockCertificateServiceIfaceMockRecorder) NewProvisionTemplateDirectDownloadCertificateParams(hostid, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProvisionTemplateDirectDownloadCertificateParams", reflect.TypeOf((*MockCertificateServiceIface)(nil).NewProvisionTemplateDirectDownloadCertificateParams), hostid, id)
}

// NewRevokeCertificateParams mocks base method.
func (m *MockCertificateServiceIface) NewRevokeCertificateParams(serial string) *RevokeCertificateParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRevokeCertificateParams", serial)
	ret0, _ := ret[0].(*RevokeCertificateParams)
	return ret0
}

// NewRevokeCertificateParams indicates an expected call of NewRevokeCertificateParams.
func (mr *MockCertificateServiceIfaceMockRecorder) NewRevokeCertificateParams(serial any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRevokeCertificateParams", reflect.TypeOf((*MockCertificateServiceIface)(nil).NewRevokeCertificateParams), serial)
}

// NewRevokeTemplateDirectDownloadCertificateParams mocks base method.
func (m *MockCertificateServiceIface) NewRevokeTemplateDirectDownloadCertificateParams(zoneid string) *RevokeTemplateDirectDownloadCertificateParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRevokeTemplateDirectDownloadCertificateParams", zoneid)
	ret0, _ := ret[0].(*RevokeTemplateDirectDownloadCertificateParams)
	return ret0
}

// NewRevokeTemplateDirectDownloadCertificateParams indicates an expected call of NewRevokeTemplateDirectDownloadCertificateParams.
func (mr *MockCertificateServiceIfaceMockRecorder) NewRevokeTemplateDirectDownloadCertificateParams(zoneid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRevokeTemplateDirectDownloadCertificateParams", reflect.TypeOf((*MockCertificateServiceIface)(nil).NewRevokeTemplateDirectDownloadCertificateParams), zoneid)
}

// NewUploadCustomCertificateParams mocks base method.
func (m *MockCertificateServiceIface) NewUploadCustomCertificateParams(certificate, domainsuffix string) *UploadCustomCertificateParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUploadCustomCertificateParams", certificate, domainsuffix)
	ret0, _ := ret[0].(*UploadCustomCertificateParams)
	return ret0
}

// NewUploadCustomCertificateParams indicates an expected call of NewUploadCustomCertificateParams.
func (mr *MockCertificateServiceIfaceMockRecorder) NewUploadCustomCertificateParams(certificate, domainsuffix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUploadCustomCertificateParams", reflect.TypeOf((*MockCertificateServiceIface)(nil).NewUploadCustomCertificateParams), certificate, domainsuffix)
}

// NewUploadTemplateDirectDownloadCertificateParams mocks base method.
func (m *MockCertificateServiceIface) NewUploadTemplateDirectDownloadCertificateParams(certificate, hypervisor, name, zoneid string) *UploadTemplateDirectDownloadCertificateParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUploadTemplateDirectDownloadCertificateParams", certificate, hypervisor, name, zoneid)
	ret0, _ := ret[0].(*UploadTemplateDirectDownloadCertificateParams)
	return ret0
}

// NewUploadTemplateDirectDownloadCertificateParams indicates an expected call of NewUploadTemplateDirectDownloadCertificateParams.
func (mr *MockCertificateServiceIfaceMockRecorder) NewUploadTemplateDirectDownloadCertificateParams(certificate, hypervisor, name, zoneid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUploadTemplateDirectDownloadCertificateParams", reflect.TypeOf((*MockCertificateServiceIface)(nil).NewUploadTemplateDirectDownloadCertificateParams), certificate, hypervisor, name, zoneid)
}

// ProvisionCertificate mocks base method.
func (m *MockCertificateServiceIface) ProvisionCertificate(p *ProvisionCertificateParams) (*ProvisionCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionCertificate", p)
	ret0, _ := ret[0].(*ProvisionCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionCertificate indicates an expected call of ProvisionCertificate.
func (mr *MockCertificateServiceIfaceMockRecorder) ProvisionCertificate(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionCertificate", reflect.TypeOf((*MockCertificateServiceIface)(nil).ProvisionCertificate), p)
}

// ProvisionTemplateDirectDownloadCertificate mocks base method.
func (m *MockCertificateServiceIface) ProvisionTemplateDirectDownloadCertificate(p *ProvisionTemplateDirectDownloadCertificateParams) (*ProvisionTemplateDirectDownloadCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionTemplateDirectDownloadCertificate", p)
	ret0, _ := ret[0].(*ProvisionTemplateDirectDownloadCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionTemplateDirectDownloadCertificate indicates an expected call of ProvisionTemplateDirectDownloadCertificate.
func (mr *MockCertificateServiceIfaceMockRecorder) ProvisionTemplateDirectDownloadCertificate(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionTemplateDirectDownloadCertificate", reflect.TypeOf((*MockCertificateServiceIface)(nil).ProvisionTemplateDirectDownloadCertificate), p)
}

// RevokeCertificate mocks base method.
func (m *MockCertificateServiceIface) RevokeCertificate(p *RevokeCertificateParams) (*RevokeCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeCertificate", p)
	ret0, _ := ret[0].(*RevokeCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeCertificate indicates an expected call of RevokeCertificate.
func (mr *MockCertificateServiceIfaceMockRecorder) RevokeCertificate(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCertificate", reflect.TypeOf((*MockCertificateServiceIface)(nil).RevokeCertificate), p)
}

// RevokeTemplateDirectDownloadCertificate mocks base method.
func (m *MockCertificateServiceIface) RevokeTemplateDirectDownloadCertificate(p *RevokeTemplateDirectDownloadCertificateParams) (*RevokeTemplateDirectDownloadCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeTemplateDirectDownloadCertificate", p)
	ret0, _ := ret[0].(*RevokeTemplateDirectDownloadCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeTemplateDirectDownloadCertificate indicates an expected call of RevokeTemplateDirectDownloadCertificate.
func (mr *MockCertificateServiceIfaceMockRecorder) RevokeTemplateDirectDownloadCertificate(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeTemplateDirectDownloadCertificate", reflect.TypeOf((*MockCertificateServiceIface)(nil).RevokeTemplateDirectDownloadCertificate), p)
}

// UploadCustomCertificate mocks base method.
func (m *MockCertificateServiceIface) UploadCustomCertificate(p *UploadCustomCertificateParams) (*UploadCustomCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadCustomCertificate", p)
	ret0, _ := ret[0].(*UploadCustomCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadCustomCertificate indicates an expected call of UploadCustomCertificate.
func (mr *MockCertificateServiceIfaceMockRecorder) UploadCustomCertificate(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadCustomCertificate", reflect.TypeOf((*MockCertificateServiceIface)(nil).UploadCustomCertificate), p)
}

// UploadTemplateDirectDownloadCertificate mocks base method.
func (m *MockCertificateServiceIface) UploadTemplateDirectDownloadCertificate(p *UploadTemplateDirectDownloadCertificateParams) (*UploadTemplateDirectDownloadCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadTemplateDirectDownloadCertificate", p)
	ret0, _ := ret[0].(*UploadTemplateDirectDownloadCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadTemplateDirectDownloadCertificate indicates an expected call of UploadTemplateDirectDownloadCertificate.
func (mr *MockCertificateServiceIfaceMockRecorder) UploadTemplateDirectDownloadCertificate(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTemplateDirectDownloadCertificate", reflect.TypeOf((*MockCertificateServiceIface)(nil).UploadTemplateDirectDownloadCertificate), p)
}
